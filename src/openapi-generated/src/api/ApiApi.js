/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Album from '../model/Album';
import AlbumReview from '../model/AlbumReview';
import Artist from '../model/Artist';
import ArtistBandMembership from '../model/ArtistBandMembership';
import Band from '../model/Band';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2005 from '../model/InlineResponse2005';
import User from '../model/User';

/**
* Api service.
* @module api/ApiApi
* @version 1.0.0
*/
export default class ApiApi {

    /**
    * Constructs a new ApiApi. 
    * @alias module:api/ApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Album} opts.album 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Album} and HTTP response
     */
    createAlbumWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['album'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Album;
      return this.apiClient.callApi(
        '/api/music/albums/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Album} opts.album 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Album}
     */
    createAlbum(opts) {
      return this.createAlbumWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/AlbumReview} opts.albumReview 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlbumReview} and HTTP response
     */
    createAlbumReviewWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['albumReview'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AlbumReview;
      return this.apiClient.callApi(
        '/api/music/album-reviews/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/AlbumReview} opts.albumReview 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlbumReview}
     */
    createAlbumReview(opts) {
      return this.createAlbumReviewWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Artist} opts.artist 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Artist} and HTTP response
     */
    createArtistWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['artist'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Artist;
      return this.apiClient.callApi(
        '/api/music/artists/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Artist} opts.artist 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Artist}
     */
    createArtist(opts) {
      return this.createArtistWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ArtistBandMembership} opts.artistBandMembership 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtistBandMembership} and HTTP response
     */
    createArtistBandMembershipWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['artistBandMembership'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ArtistBandMembership;
      return this.apiClient.callApi(
        '/api/music/artist-band-membership/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ArtistBandMembership} opts.artistBandMembership 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtistBandMembership}
     */
    createArtistBandMembership(opts) {
      return this.createArtistBandMembershipWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Band} opts.band 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Band} and HTTP response
     */
    createBandWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['band'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Band;
      return this.apiClient.callApi(
        '/api/music/bands/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Band} opts.band 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Band}
     */
    createBand(opts) {
      return this.createBandWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this album.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    destroyAlbumWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling destroyAlbum");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/music/albums/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this album.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    destroyAlbum(id) {
      return this.destroyAlbumWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this album review.
     * @param {Object} opts Optional parameters
     * @param {String} opts.author author
     * @param {String} opts.albumIn album__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    destroyAlbumReviewWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling destroyAlbumReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'author': opts['author'],
        'album__in': opts['albumIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/music/album-reviews/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this album review.
     * @param {Object} opts Optional parameters
     * @param {String} opts.author author
     * @param {String} opts.albumIn album__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    destroyAlbumReview(id, opts) {
      return this.destroyAlbumReviewWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this artist.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    destroyArtistWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling destroyArtist");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'id': opts['id2'],
        'id__in': opts['idIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/music/artists/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this artist.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    destroyArtist(id, opts) {
      return this.destroyArtistWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this artist band membership.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    destroyArtistBandMembershipWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling destroyArtistBandMembership");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/music/artist-band-membership/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this artist band membership.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    destroyArtistBandMembership(id) {
      return this.destroyArtistBandMembershipWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this band.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    destroyBandWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling destroyBand");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'id': opts['id2'],
        'id__in': opts['idIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/music/bands/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this band.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    destroyBand(id, opts) {
      return this.destroyBandWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {String} opts.author author
     * @param {String} opts.albumIn album__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    listAlbumReviewsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'author': opts['author'],
        'album__in': opts['albumIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/api/music/album-reviews/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {String} opts.author author
     * @param {String} opts.albumIn album__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    listAlbumReviews(opts) {
      return this.listAlbumReviewsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    listAlbumsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;
      return this.apiClient.callApi(
        '/api/music/albums/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    listAlbums(opts) {
      return this.listAlbumsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    listArtistBandMembershipsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/api/music/artist-band-membership/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    listArtistBandMemberships(opts) {
      return this.listArtistBandMembershipsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {String} opts.id id
     * @param {String} opts.idIn id__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    listArtistsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'id': opts['id'],
        'id__in': opts['idIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/api/music/artists/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {String} opts.id id
     * @param {String} opts.idIn id__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    listArtists(opts) {
      return this.listArtistsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {String} opts.id id
     * @param {String} opts.idIn id__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    listBandsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'id': opts['id'],
        'id__in': opts['idIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;
      return this.apiClient.callApi(
        '/api/music/bands/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {String} opts.id id
     * @param {String} opts.idIn id__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    listBands(opts) {
      return this.listBandsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    listUsersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/api/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    listUsers(opts) {
      return this.listUsersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this album.
     * @param {Object} opts Optional parameters
     * @param {module:model/Album} opts.album 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Album} and HTTP response
     */
    partialUpdateAlbumWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['album'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateAlbum");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Album;
      return this.apiClient.callApi(
        '/api/music/albums/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this album.
     * @param {Object} opts Optional parameters
     * @param {module:model/Album} opts.album 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Album}
     */
    partialUpdateAlbum(id, opts) {
      return this.partialUpdateAlbumWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this album review.
     * @param {Object} opts Optional parameters
     * @param {String} opts.author author
     * @param {String} opts.albumIn album__in
     * @param {module:model/AlbumReview} opts.albumReview 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlbumReview} and HTTP response
     */
    partialUpdateAlbumReviewWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['albumReview'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateAlbumReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'author': opts['author'],
        'album__in': opts['albumIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AlbumReview;
      return this.apiClient.callApi(
        '/api/music/album-reviews/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this album review.
     * @param {Object} opts Optional parameters
     * @param {String} opts.author author
     * @param {String} opts.albumIn album__in
     * @param {module:model/AlbumReview} opts.albumReview 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlbumReview}
     */
    partialUpdateAlbumReview(id, opts) {
      return this.partialUpdateAlbumReviewWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this artist.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @param {module:model/Artist} opts.artist 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Artist} and HTTP response
     */
    partialUpdateArtistWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['artist'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateArtist");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'id': opts['id2'],
        'id__in': opts['idIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Artist;
      return this.apiClient.callApi(
        '/api/music/artists/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this artist.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @param {module:model/Artist} opts.artist 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Artist}
     */
    partialUpdateArtist(id, opts) {
      return this.partialUpdateArtistWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this artist band membership.
     * @param {Object} opts Optional parameters
     * @param {module:model/ArtistBandMembership} opts.artistBandMembership 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtistBandMembership} and HTTP response
     */
    partialUpdateArtistBandMembershipWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['artistBandMembership'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateArtistBandMembership");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ArtistBandMembership;
      return this.apiClient.callApi(
        '/api/music/artist-band-membership/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this artist band membership.
     * @param {Object} opts Optional parameters
     * @param {module:model/ArtistBandMembership} opts.artistBandMembership 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtistBandMembership}
     */
    partialUpdateArtistBandMembership(id, opts) {
      return this.partialUpdateArtistBandMembershipWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this band.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @param {module:model/Band} opts.band 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Band} and HTTP response
     */
    partialUpdateBandWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['band'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateBand");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'id': opts['id2'],
        'id__in': opts['idIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Band;
      return this.apiClient.callApi(
        '/api/music/bands/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this band.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @param {module:model/Band} opts.band 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Band}
     */
    partialUpdateBand(id, opts) {
      return this.partialUpdateBandWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this album.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Album} and HTTP response
     */
    retrieveAlbumWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveAlbum");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Album;
      return this.apiClient.callApi(
        '/api/music/albums/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this album.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Album}
     */
    retrieveAlbum(id) {
      return this.retrieveAlbumWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this album review.
     * @param {Object} opts Optional parameters
     * @param {String} opts.author author
     * @param {String} opts.albumIn album__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlbumReview} and HTTP response
     */
    retrieveAlbumReviewWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveAlbumReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'author': opts['author'],
        'album__in': opts['albumIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlbumReview;
      return this.apiClient.callApi(
        '/api/music/album-reviews/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this album review.
     * @param {Object} opts Optional parameters
     * @param {String} opts.author author
     * @param {String} opts.albumIn album__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlbumReview}
     */
    retrieveAlbumReview(id, opts) {
      return this.retrieveAlbumReviewWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this artist.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Artist} and HTTP response
     */
    retrieveArtistWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveArtist");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'id': opts['id2'],
        'id__in': opts['idIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Artist;
      return this.apiClient.callApi(
        '/api/music/artists/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this artist.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Artist}
     */
    retrieveArtist(id, opts) {
      return this.retrieveArtistWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this artist band membership.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtistBandMembership} and HTTP response
     */
    retrieveArtistBandMembershipWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveArtistBandMembership");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtistBandMembership;
      return this.apiClient.callApi(
        '/api/music/artist-band-membership/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this artist band membership.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtistBandMembership}
     */
    retrieveArtistBandMembership(id) {
      return this.retrieveArtistBandMembershipWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this band.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Band} and HTTP response
     */
    retrieveBandWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveBand");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'id': opts['id2'],
        'id__in': opts['idIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Band;
      return this.apiClient.callApi(
        '/api/music/bands/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this band.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Band}
     */
    retrieveBand(id, opts) {
      return this.retrieveBandWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    retrieveCurrentUserWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/me/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    retrieveCurrentUser() {
      return this.retrieveCurrentUserWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    retrieveUserWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/users/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    retrieveUser(id) {
      return this.retrieveUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this album.
     * @param {Object} opts Optional parameters
     * @param {module:model/Album} opts.album 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Album} and HTTP response
     */
    updateAlbumWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['album'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAlbum");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Album;
      return this.apiClient.callApi(
        '/api/music/albums/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this album.
     * @param {Object} opts Optional parameters
     * @param {module:model/Album} opts.album 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Album}
     */
    updateAlbum(id, opts) {
      return this.updateAlbumWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this album review.
     * @param {Object} opts Optional parameters
     * @param {String} opts.author author
     * @param {String} opts.albumIn album__in
     * @param {module:model/AlbumReview} opts.albumReview 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlbumReview} and HTTP response
     */
    updateAlbumReviewWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['albumReview'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAlbumReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'author': opts['author'],
        'album__in': opts['albumIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AlbumReview;
      return this.apiClient.callApi(
        '/api/music/album-reviews/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this album review.
     * @param {Object} opts Optional parameters
     * @param {String} opts.author author
     * @param {String} opts.albumIn album__in
     * @param {module:model/AlbumReview} opts.albumReview 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlbumReview}
     */
    updateAlbumReview(id, opts) {
      return this.updateAlbumReviewWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this artist.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @param {module:model/Artist} opts.artist 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Artist} and HTTP response
     */
    updateArtistWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['artist'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateArtist");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'id': opts['id2'],
        'id__in': opts['idIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Artist;
      return this.apiClient.callApi(
        '/api/music/artists/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this artist.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @param {module:model/Artist} opts.artist 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Artist}
     */
    updateArtist(id, opts) {
      return this.updateArtistWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this artist band membership.
     * @param {Object} opts Optional parameters
     * @param {module:model/ArtistBandMembership} opts.artistBandMembership 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArtistBandMembership} and HTTP response
     */
    updateArtistBandMembershipWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['artistBandMembership'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateArtistBandMembership");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ArtistBandMembership;
      return this.apiClient.callApi(
        '/api/music/artist-band-membership/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this artist band membership.
     * @param {Object} opts Optional parameters
     * @param {module:model/ArtistBandMembership} opts.artistBandMembership 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArtistBandMembership}
     */
    updateArtistBandMembership(id, opts) {
      return this.updateArtistBandMembershipWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id A unique integer value identifying this band.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @param {module:model/Band} opts.band 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Band} and HTTP response
     */
    updateBandWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['band'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBand");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'id': opts['id2'],
        'id__in': opts['idIn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Band;
      return this.apiClient.callApi(
        '/api/music/bands/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id A unique integer value identifying this band.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id2 id
     * @param {String} opts.idIn id__in
     * @param {module:model/Band} opts.band 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Band}
     */
    updateBand(id, opts) {
      return this.updateBandWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
